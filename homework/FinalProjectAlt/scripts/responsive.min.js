var Responsive = (function(i) {
    var c = "LARGEST",
        j = {
            NARROW: {
                maxWidth: 600,
                applySequencing: true
            },
            MEDIUM: {
                maxWidth: 800
            }
        },
        g = [],
        d = {},
        h = "/styles/",
        l,
        k,
        e = function(o) {
            j = o;
            g = i.map(j, function(p, q) {
                return p.maxWidth
            }).sort(function(p, q) {
                return (p == q) ? 0 : (p > q) ? -1 : 1
            });
            d = {};
            i.each(j, function(p, q) {
                d[p] = p
            });
            d[c] = c;
            if (l) {
                Responsive.LayoutType = d
            }
        },
        a = function(q) {
            if (l) {
                alert("Responsive options have already been initialized; cannot call Responsive.init() more than once per page.");
                return
            }
            l = q;
            var p = l.layouts || {},
                o = l.sequences || {},
                r;
            if (!i.isPlainObject(p)) {
                alert('Responsive option named "layouts" must be a plain object.\n\nExample: layouts: { NARROW: { maxWidth: 650 }, MEDIUM: { maxWidth: 900 } }');
                return
            }
            if (p[c]) {
                alert('Responsive option named "layouts" cannot contain a layout named "' + c + '"; it is a protected name.');
                return
            }
            if (!i.isPlainObject(o)) {
                alert('Responsive option named "sequences" must be a plain object.\n\nKeys should be parent selectors, values should be arrays of child selectors.\n\nExample: sequences: { "#parent-container": [ "#container-2", "#container-1" ] }');
                return
            }
            if (l.cssFolder) {
                h = l.cssFolder
            }
            if (!i.isEmptyObject(p)) {
                e(p);
                if (k) {
                    m()
                }
            }
            for (r in o) {
                n.add(o[r], r)
            }
            if (l.onLayoutChange) {
                f.addCallback(l.onLayoutChange)
            }
        },
        m = function() {
            var o = f.calculate();
            if (k != o) {
                b(o)
            }
        },
        b = function(o, p) {
            n.update(o, p);
            f.update(o, p);
            k = o
        },
        f = (function() {
            var p = false,
                s = {},
                o = {},
                q = i.Callbacks("memory unique"),
                t = function(v) {
                    return h + (j[v].stylesheet || v.toLowerCase() + ".css") + (p ? "?_=" + (new Date()).valueOf() : "")
                },
                r = function(w) {
                    if (typeof s[w] != "undefined") {
                        return
                    }
                    u();
                    if (typeof j[w].stylesheet != "undefined" && !j[w].stylesheet) {
                        return
                    }
                    var v = o[w] || t(w);
                    s[w] = i('<link rel="stylesheet" type="text/css" href="' + v + '" media="screen">').appendTo("head");
                    o[w] = v
                },
                u = function() {
                    for (var v in s) {
                        s[v].remove();
                        delete s[v]
                    }
                };
            return {
                calculate: function() {
                    var v = i(window).width(),
                        w,
                        x;
                    i.each(g, function(z, y) {
                        if (v <= y) {
                            x = y
                        }
                    });
                    for (w in j) {
                        if (j[w].maxWidth == x) {
                            return w
                        }
                    }
                    return c
                },
                addCallback: function(v) {
                    if (typeof (v) == "function") {
                        q.add(v)
                    } else {
                        alert("A function must be passed in that will be fired when the responsive layout changes.")
                    }
                },
                update: function(v) {
                    if (v != c) {
                        r(v)
                    } else {
                        u()
                    }
                    i("#wrapper").css({
                        position: "static",
                        top: "auto",
                        width: "auto"
                    });
                    q.fire(v)
                }
            }
        })(),
        n = (function() {
            var q = {},
                t = i.Callbacks("memory"),
                u,
                o = "#content",
                r = function(v, w) {
                    return function(x) {
                        var y = p(v);
                        if (y.size() == 1) {
                            s(y, w, x)
                        } else {
                            if (y.size() > 1) {
                                alert("Found more than 1 parent container; parent selector must match a single unique DOM element.")
                            }
                        }
                    }
                },
                p = function(v) {
                    var w = i(v);
                    if (w.size() == 0 && /^#/.test(v) && v == o) {
                        w = i(parentSelector = "." + v.substring(1, v.length - 2))
                    }
                    return w
                },
                s = function(v, y, w) {
                    var x = i.map(y, function(z, A) {
                        return i(z)
                    });
                    i(x.reverse()).each(function() {
                        var z = this.attr("id") + "__responsive_sequence_placeholder";
                        if (w && this.next().attr("id") != z) {
                            this.after("<div id=" + z + "></div>")
                        }
                        if (w) {
                            v.prepend(this)
                        } else {
                            i("#" + z).before(this)
                        }
                    })
                };
            return {
                add: function(x, v) {
                    var w = v || o;
                    if (!x || !i.isArray(x)) {
                        alert("Each responsive sequence must be an array of unique selector strings.");
                        return
                    }
                    if (q[w]) {
                        alert("Responsive sequence has already been set!\n\nParent: " + w + "\nConfigured sequence: " + q[w]);
                        return
                    }
                    q[w] = x;
                    t.add(r(w, x))
                },
                update: function(w, v) {
                    var x = (j[w] && j[w].applySequencing);
                    if (!!u == !!x && !v) {
                        return
                    }
                    t.fire(x);
                    u = x
                }
            }
        })();
    e(j);
    i(function() {
        m();
        i(window).resize(m)
    });
    return {
        LayoutType: d,
        getLayout: function() {
            return f.calculate()
        },
        updateLayout: function() {
            b(f.calculate(), true)
        },
        init: function(o) {
            if (o && i.isPlainObject(o)) {
                a(o)
            } else {
                alert("Error: A plain object containing options must be passed in for initializing the responsive layout.")
            }
        },
        onLayoutChange: function(o) {
            f.addCallback(o)
        },
        addSequence: function(p, o) {
            n.add(p, o)
        },
        author: "Kobe Snyder (Webitects.com)",
        date: "January 2014",
        version: "1.2"
    }
})(jQuery);
